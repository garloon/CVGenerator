// <auto-generated />
using System;
using CVGenerator.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace CVGenerator.Core.Migrations
{
    [DbContext(typeof(GeneratorContext))]
    partial class GeneratorContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.16")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("CVGenerator.Core.Data.Entities.Certificate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp");

                    b.Property<long?>("ExternalId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(400)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.ToTable("certificates");
                });

            modelBuilder.Entity("CVGenerator.Core.Data.Entities.Cv", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<long>("CvSettingsId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(350)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("CvSettingsId")
                        .IsUnique();

                    b.HasIndex("EmployeeId");

                    b.ToTable("cv");
                });

            modelBuilder.Entity("CVGenerator.Core.Data.Entities.CvSettings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.ToTable("cv_settings");
                });

            modelBuilder.Entity("CVGenerator.Core.Data.Entities.Department", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp");

                    b.Property<string>("ExternalId")
                        .HasColumnType("varchar(150)");

                    b.Property<bool>("IsApplicationDepartment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsForCv")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsLocation")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.ToTable("departments");

                    b.HasData(
                        new
                        {
                            Id = 10L,
                            Created = new DateTime(2022, 5, 20, 9, 8, 41, 832, DateTimeKind.Utc).AddTicks(7425),
                            IsApplicationDepartment = true,
                            IsForCv = false,
                            IsLocation = false,
                            Name = "Administrators",
                            Role = 4,
                            Updated = new DateTime(2022, 5, 20, 9, 8, 41, 832, DateTimeKind.Utc).AddTicks(7797),
                            Version = 0L
                        },
                        new
                        {
                            Id = 11L,
                            Created = new DateTime(2022, 5, 20, 9, 8, 41, 832, DateTimeKind.Utc).AddTicks(9411),
                            IsApplicationDepartment = true,
                            IsForCv = false,
                            IsLocation = false,
                            Name = "Supervisors",
                            Role = 3,
                            Updated = new DateTime(2022, 5, 20, 9, 8, 41, 832, DateTimeKind.Utc).AddTicks(9413),
                            Version = 0L
                        },
                        new
                        {
                            Id = 12L,
                            Created = new DateTime(2022, 5, 20, 9, 8, 41, 832, DateTimeKind.Utc).AddTicks(9417),
                            IsApplicationDepartment = true,
                            IsForCv = false,
                            IsLocation = false,
                            Name = "Accounts",
                            Role = 2,
                            Updated = new DateTime(2022, 5, 20, 9, 8, 41, 832, DateTimeKind.Utc).AddTicks(9417),
                            Version = 0L
                        });
                });

            modelBuilder.Entity("CVGenerator.Core.Data.Entities.Education", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("BeginDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SpecialtyName")
                        .HasColumnType("varchar(150)");

                    b.Property<int>("TypeSpecialty")
                        .HasColumnType("integer");

                    b.Property<string>("UniversityName")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.ToTable("educations");
                });

            modelBuilder.Entity("CVGenerator.Core.Data.Entities.Employee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<long?>("ExternalId")
                        .HasColumnType("bigint");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("varchar(60)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("varchar(150)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.ToTable("employees");

                    b.HasData(
                        new
                        {
                            Id = 10L,
                            Created = new DateTime(2022, 5, 20, 9, 8, 41, 833, DateTimeKind.Utc).AddTicks(4398),
                            Email = "superadmin@simbirsoft.com",
                            FirstName = "admin",
                            LastName = "super",
                            Login = "superadmin",
                            Status = 1,
                            Updated = new DateTime(2022, 5, 20, 9, 8, 41, 833, DateTimeKind.Utc).AddTicks(4404),
                            Version = 0L
                        });
                });

            modelBuilder.Entity("CVGenerator.Core.Data.Entities.EmployeeCertificate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("CertificateId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ExternalId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("CertificateId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("employee_certificates");
                });

            modelBuilder.Entity("CVGenerator.Core.Data.Entities.EmployeeDepartment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp");

                    b.Property<long>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("employee_departments");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Created = new DateTime(2022, 5, 20, 9, 8, 41, 834, DateTimeKind.Utc).AddTicks(1304),
                            DepartmentId = 10L,
                            EmployeeId = 10L,
                            Updated = new DateTime(2022, 5, 20, 9, 8, 41, 834, DateTimeKind.Utc).AddTicks(1308),
                            Version = 0L
                        });
                });

            modelBuilder.Entity("CVGenerator.Core.Data.Entities.EmployeeEducation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp");

                    b.Property<long>("EducationId")
                        .HasColumnType("bigint");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("EducationId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("employee_educations");
                });

            modelBuilder.Entity("CVGenerator.Core.Data.Entities.EmployeeHardSkill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AbilityLevel")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ExternalId")
                        .HasColumnType("bigint");

                    b.Property<long>("HardSkillId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("HardSkillId");

                    b.ToTable("employee_hard_skills");
                });

            modelBuilder.Entity("CVGenerator.Core.Data.Entities.EmployeeLanguage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<int>("LanguageLevel")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LanguageId");

                    b.ToTable("employee_languages");
                });

            modelBuilder.Entity("CVGenerator.Core.Data.Entities.EmployeeProfessionalAbility", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProfessionalAbilityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProfessionalAbilityId");

                    b.ToTable("employee_abilities");
                });

            modelBuilder.Entity("CVGenerator.Core.Data.Entities.EmployeeProject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp");

                    b.Property<string>("DescriptionProject")
                        .HasColumnType("varchar(3000)");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("MyTasks")
                        .HasColumnType("varchar(3000)");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<int?>("ProjectRoleId")
                        .HasColumnType("integer");

                    b.Property<string>("ShowName")
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectRoleId");

                    b.ToTable("employee_projects");
                });

            modelBuilder.Entity("CVGenerator.Core.Data.Entities.HardSkill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp");

                    b.Property<long?>("ExternalId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActual")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Type")
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.ToTable("hard_skills");
                });

            modelBuilder.Entity("CVGenerator.Core.Data.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.ToTable("languages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2022, 5, 20, 9, 8, 41, 830, DateTimeKind.Utc).AddTicks(3554),
                            Name = "Английский",
                            Updated = new DateTime(2022, 5, 20, 9, 8, 41, 830, DateTimeKind.Utc).AddTicks(4423),
                            Version = 0L
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2022, 5, 20, 9, 8, 41, 830, DateTimeKind.Utc).AddTicks(6117),
                            Name = "Французский",
                            Updated = new DateTime(2022, 5, 20, 9, 8, 41, 830, DateTimeKind.Utc).AddTicks(6121),
                            Version = 0L
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2022, 5, 20, 9, 8, 41, 830, DateTimeKind.Utc).AddTicks(6125),
                            Name = "Немецкий",
                            Updated = new DateTime(2022, 5, 20, 9, 8, 41, 830, DateTimeKind.Utc).AddTicks(6126),
                            Version = 0L
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(2022, 5, 20, 9, 8, 41, 830, DateTimeKind.Utc).AddTicks(6128),
                            Name = "Испанский",
                            Updated = new DateTime(2022, 5, 20, 9, 8, 41, 830, DateTimeKind.Utc).AddTicks(6129),
                            Version = 0L
                        },
                        new
                        {
                            Id = 5,
                            Created = new DateTime(2022, 5, 20, 9, 8, 41, 830, DateTimeKind.Utc).AddTicks(6131),
                            Name = "Португальский",
                            Updated = new DateTime(2022, 5, 20, 9, 8, 41, 830, DateTimeKind.Utc).AddTicks(6132),
                            Version = 0L
                        },
                        new
                        {
                            Id = 6,
                            Created = new DateTime(2022, 5, 20, 9, 8, 41, 830, DateTimeKind.Utc).AddTicks(6133),
                            Name = "Турецкий",
                            Updated = new DateTime(2022, 5, 20, 9, 8, 41, 830, DateTimeKind.Utc).AddTicks(6134),
                            Version = 0L
                        },
                        new
                        {
                            Id = 7,
                            Created = new DateTime(2022, 5, 20, 9, 8, 41, 830, DateTimeKind.Utc).AddTicks(6136),
                            Name = "Арабский",
                            Updated = new DateTime(2022, 5, 20, 9, 8, 41, 830, DateTimeKind.Utc).AddTicks(6137),
                            Version = 0L
                        },
                        new
                        {
                            Id = 8,
                            Created = new DateTime(2022, 5, 20, 9, 8, 41, 830, DateTimeKind.Utc).AddTicks(6138),
                            Name = "Китайский",
                            Updated = new DateTime(2022, 5, 20, 9, 8, 41, 830, DateTimeKind.Utc).AddTicks(6139),
                            Version = 0L
                        },
                        new
                        {
                            Id = 9,
                            Created = new DateTime(2022, 5, 20, 9, 8, 41, 830, DateTimeKind.Utc).AddTicks(6141),
                            Name = "Японский",
                            Updated = new DateTime(2022, 5, 20, 9, 8, 41, 830, DateTimeKind.Utc).AddTicks(6142),
                            Version = 0L
                        });
                });

            modelBuilder.Entity("CVGenerator.Core.Data.Entities.ProfessionalAbility", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp");

                    b.Property<long?>("ExternalId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<long>("PositionId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Required")
                        .HasColumnType("boolean");

                    b.Property<long>("SectionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.ToTable("professional_abilities");
                });

            modelBuilder.Entity("CVGenerator.Core.Data.Entities.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(3000)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("ExternalId")
                        .HasColumnType("text");

                    b.Property<bool>("IsActual")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPersonal")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.ToTable("projects");
                });

            modelBuilder.Entity("CVGenerator.Core.Data.Entities.ProjectHardSkill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp");

                    b.Property<long>("HardSkillId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("HardSkillId");

                    b.HasIndex("ProjectId");

                    b.ToTable("project_hard_skills");
                });

            modelBuilder.Entity("CVGenerator.Core.Data.Entities.ProjectRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp");

                    b.Property<bool>("IsPersonal")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.ToTable("project_roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2022, 5, 20, 9, 8, 41, 832, DateTimeKind.Utc).AddTicks(2622),
                            IsPersonal = false,
                            Name = "Tech Leader",
                            ShortName = "Tech Leader",
                            Updated = new DateTime(2022, 5, 20, 9, 8, 41, 832, DateTimeKind.Utc).AddTicks(2633),
                            Version = 0L
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2022, 5, 20, 9, 8, 41, 832, DateTimeKind.Utc).AddTicks(3713),
                            IsPersonal = false,
                            Name = "Team Leader",
                            ShortName = "Team Leader",
                            Updated = new DateTime(2022, 5, 20, 9, 8, 41, 832, DateTimeKind.Utc).AddTicks(3716),
                            Version = 0L
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2022, 5, 20, 9, 8, 41, 832, DateTimeKind.Utc).AddTicks(3719),
                            IsPersonal = false,
                            Name = "Project Manager",
                            ShortName = "PM",
                            Updated = new DateTime(2022, 5, 20, 9, 8, 41, 832, DateTimeKind.Utc).AddTicks(3720),
                            Version = 0L
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(2022, 5, 20, 9, 8, 41, 832, DateTimeKind.Utc).AddTicks(3721),
                            IsPersonal = false,
                            Name = "DevOps",
                            ShortName = "DevOps",
                            Updated = new DateTime(2022, 5, 20, 9, 8, 41, 832, DateTimeKind.Utc).AddTicks(3722),
                            Version = 0L
                        },
                        new
                        {
                            Id = 5,
                            Created = new DateTime(2022, 5, 20, 9, 8, 41, 832, DateTimeKind.Utc).AddTicks(3723),
                            IsPersonal = false,
                            Name = "Human Resource",
                            ShortName = "HR",
                            Updated = new DateTime(2022, 5, 20, 9, 8, 41, 832, DateTimeKind.Utc).AddTicks(3724),
                            Version = 0L
                        },
                        new
                        {
                            Id = 6,
                            Created = new DateTime(2022, 5, 20, 9, 8, 41, 832, DateTimeKind.Utc).AddTicks(3726),
                            IsPersonal = false,
                            Name = "Software Development Engineer in Test",
                            ShortName = "SDET",
                            Updated = new DateTime(2022, 5, 20, 9, 8, 41, 832, DateTimeKind.Utc).AddTicks(3726),
                            Version = 0L
                        },
                        new
                        {
                            Id = 7,
                            Created = new DateTime(2022, 5, 20, 9, 8, 41, 832, DateTimeKind.Utc).AddTicks(3728),
                            IsPersonal = false,
                            Name = "Backend developer",
                            ShortName = "Backend",
                            Updated = new DateTime(2022, 5, 20, 9, 8, 41, 832, DateTimeKind.Utc).AddTicks(3728),
                            Version = 0L
                        },
                        new
                        {
                            Id = 8,
                            Created = new DateTime(2022, 5, 20, 9, 8, 41, 832, DateTimeKind.Utc).AddTicks(3730),
                            IsPersonal = false,
                            Name = "Frontend developer",
                            ShortName = "Frontend",
                            Updated = new DateTime(2022, 5, 20, 9, 8, 41, 832, DateTimeKind.Utc).AddTicks(3730),
                            Version = 0L
                        },
                        new
                        {
                            Id = 9,
                            Created = new DateTime(2022, 5, 20, 9, 8, 41, 832, DateTimeKind.Utc).AddTicks(3732),
                            IsPersonal = false,
                            Name = "Mobile developer",
                            ShortName = "Mobile",
                            Updated = new DateTime(2022, 5, 20, 9, 8, 41, 832, DateTimeKind.Utc).AddTicks(3732),
                            Version = 0L
                        },
                        new
                        {
                            Id = 10,
                            Created = new DateTime(2022, 5, 20, 9, 8, 41, 832, DateTimeKind.Utc).AddTicks(3734),
                            IsPersonal = false,
                            Name = "Quality Assurance",
                            ShortName = "QA",
                            Updated = new DateTime(2022, 5, 20, 9, 8, 41, 832, DateTimeKind.Utc).AddTicks(3734),
                            Version = 0L
                        },
                        new
                        {
                            Id = 11,
                            Created = new DateTime(2022, 5, 20, 9, 8, 41, 832, DateTimeKind.Utc).AddTicks(3736),
                            IsPersonal = false,
                            Name = "User Interface Designer",
                            ShortName = "UI",
                            Updated = new DateTime(2022, 5, 20, 9, 8, 41, 832, DateTimeKind.Utc).AddTicks(3736),
                            Version = 0L
                        },
                        new
                        {
                            Id = 12,
                            Created = new DateTime(2022, 5, 20, 9, 8, 41, 832, DateTimeKind.Utc).AddTicks(3738),
                            IsPersonal = false,
                            Name = "User Experience Designer",
                            ShortName = "UX",
                            Updated = new DateTime(2022, 5, 20, 9, 8, 41, 832, DateTimeKind.Utc).AddTicks(3738),
                            Version = 0L
                        });
                });

            modelBuilder.Entity("CVGenerator.Core.Data.Entities.Rules.CertificateRule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("CertificateId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<long>("CvSettingsId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp");

                    b.Property<bool>("IsShow")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("CertificateId");

                    b.HasIndex("CvSettingsId");

                    b.ToTable("certificate_rules");
                });

            modelBuilder.Entity("CVGenerator.Core.Data.Entities.Rules.EducationRule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<long>("CvSettingsId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp");

                    b.Property<long>("EducationId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsShow")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("CvSettingsId");

                    b.HasIndex("EducationId");

                    b.ToTable("education_rules");
                });

            modelBuilder.Entity("CVGenerator.Core.Data.Entities.Rules.HardSkillRule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<long>("CvSettingsId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp");

                    b.Property<long>("HardSkillId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsShow")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("CvSettingsId");

                    b.HasIndex("HardSkillId");

                    b.ToTable("hard_skill_rules");
                });

            modelBuilder.Entity("CVGenerator.Core.Data.Entities.Rules.LanguageRule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<long>("CvSettingsId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp");

                    b.Property<bool>("IsShow")
                        .HasColumnType("boolean");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<int>("LanguageLevel")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("CvSettingsId");

                    b.HasIndex("LanguageId");

                    b.ToTable("language_rules");
                });

            modelBuilder.Entity("CVGenerator.Core.Data.Entities.Rules.ProfessionalAbilityRule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<long>("CvSettingsId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp");

                    b.Property<bool>("IsShow")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("CvSettingsId");

                    b.ToTable("professional_ability_rules");
                });

            modelBuilder.Entity("CVGenerator.Core.Data.Entities.Rules.ProjectRule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<long>("CvSettingsId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp");

                    b.Property<string>("DescriptionProject")
                        .IsRequired()
                        .HasColumnType("varchar(3000)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp");

                    b.Property<bool>("IsShow")
                        .HasColumnType("boolean");

                    b.Property<string>("MyTasks")
                        .IsRequired()
                        .HasColumnType("varchar(3000)");

                    b.Property<int>("ProjectRoleId")
                        .HasColumnType("integer");

                    b.Property<string>("ShowName")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("CvSettingsId");

                    b.HasIndex("ProjectRoleId");

                    b.ToTable("project_rules");
                });

            modelBuilder.Entity("CVGenerator.Core.Data.Entities.TemporaryReference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp");

                    b.Property<Guid>("CvId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("ExpirationTimeout")
                        .HasColumnType("timestamp");

                    b.Property<long>("NumberDownloads")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("CvId");

                    b.ToTable("temporaries_references");
                });

            modelBuilder.Entity("CVGenerator.Core.Data.Entities.Cv", b =>
                {
                    b.HasOne("CVGenerator.Core.Data.Entities.CvSettings", "CvSettings")
                        .WithOne("Cv")
                        .HasForeignKey("CVGenerator.Core.Data.Entities.Cv", "CvSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CVGenerator.Core.Data.Entities.Employee", "Employee")
                        .WithMany("Cvs")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CvSettings");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("CVGenerator.Core.Data.Entities.EmployeeCertificate", b =>
                {
                    b.HasOne("CVGenerator.Core.Data.Entities.Certificate", "Certificate")
                        .WithMany("Employees")
                        .HasForeignKey("CertificateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CVGenerator.Core.Data.Entities.Employee", "Employee")
                        .WithMany("Certificates")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certificate");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("CVGenerator.Core.Data.Entities.EmployeeDepartment", b =>
                {
                    b.HasOne("CVGenerator.Core.Data.Entities.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CVGenerator.Core.Data.Entities.Employee", "Employee")
                        .WithMany("Departments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("CVGenerator.Core.Data.Entities.EmployeeEducation", b =>
                {
                    b.HasOne("CVGenerator.Core.Data.Entities.Education", "Education")
                        .WithMany("Employees")
                        .HasForeignKey("EducationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CVGenerator.Core.Data.Entities.Employee", "Employee")
                        .WithMany("Educations")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Education");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("CVGenerator.Core.Data.Entities.EmployeeHardSkill", b =>
                {
                    b.HasOne("CVGenerator.Core.Data.Entities.Employee", "Employee")
                        .WithMany("HardSkills")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CVGenerator.Core.Data.Entities.HardSkill", "HardSkill")
                        .WithMany("Employees")
                        .HasForeignKey("HardSkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("HardSkill");
                });

            modelBuilder.Entity("CVGenerator.Core.Data.Entities.EmployeeLanguage", b =>
                {
                    b.HasOne("CVGenerator.Core.Data.Entities.Employee", "Employee")
                        .WithMany("Languages")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CVGenerator.Core.Data.Entities.Language", "Language")
                        .WithMany("Employees")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("CVGenerator.Core.Data.Entities.EmployeeProfessionalAbility", b =>
                {
                    b.HasOne("CVGenerator.Core.Data.Entities.Employee", "Employee")
                        .WithMany("ProfessionalAbilities")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CVGenerator.Core.Data.Entities.ProfessionalAbility", "ProfessionalAbility")
                        .WithMany()
                        .HasForeignKey("ProfessionalAbilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("ProfessionalAbility");
                });

            modelBuilder.Entity("CVGenerator.Core.Data.Entities.EmployeeProject", b =>
                {
                    b.HasOne("CVGenerator.Core.Data.Entities.Employee", "Employee")
                        .WithMany("Projects")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CVGenerator.Core.Data.Entities.Project", "Project")
                        .WithMany("Employees")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CVGenerator.Core.Data.Entities.ProjectRole", "ProjectRole")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectRoleId");

                    b.Navigation("Employee");

                    b.Navigation("Project");

                    b.Navigation("ProjectRole");
                });

            modelBuilder.Entity("CVGenerator.Core.Data.Entities.ProjectHardSkill", b =>
                {
                    b.HasOne("CVGenerator.Core.Data.Entities.HardSkill", "HardSkill")
                        .WithMany("Projects")
                        .HasForeignKey("HardSkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CVGenerator.Core.Data.Entities.Project", "Project")
                        .WithMany("HardSkills")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HardSkill");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("CVGenerator.Core.Data.Entities.Rules.CertificateRule", b =>
                {
                    b.HasOne("CVGenerator.Core.Data.Entities.Certificate", "Certificate")
                        .WithMany()
                        .HasForeignKey("CertificateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CVGenerator.Core.Data.Entities.CvSettings", "CvSettings")
                        .WithMany("CertificateRules")
                        .HasForeignKey("CvSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certificate");

                    b.Navigation("CvSettings");
                });

            modelBuilder.Entity("CVGenerator.Core.Data.Entities.Rules.EducationRule", b =>
                {
                    b.HasOne("CVGenerator.Core.Data.Entities.CvSettings", "CvSettings")
                        .WithMany("EducationRules")
                        .HasForeignKey("CvSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CVGenerator.Core.Data.Entities.Education", "Education")
                        .WithMany()
                        .HasForeignKey("EducationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CvSettings");

                    b.Navigation("Education");
                });

            modelBuilder.Entity("CVGenerator.Core.Data.Entities.Rules.HardSkillRule", b =>
                {
                    b.HasOne("CVGenerator.Core.Data.Entities.CvSettings", "CvSettings")
                        .WithMany("HardSkillRules")
                        .HasForeignKey("CvSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CVGenerator.Core.Data.Entities.HardSkill", "HardSkill")
                        .WithMany()
                        .HasForeignKey("HardSkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CvSettings");

                    b.Navigation("HardSkill");
                });

            modelBuilder.Entity("CVGenerator.Core.Data.Entities.Rules.LanguageRule", b =>
                {
                    b.HasOne("CVGenerator.Core.Data.Entities.CvSettings", "CvSettings")
                        .WithMany("LanguageRules")
                        .HasForeignKey("CvSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CVGenerator.Core.Data.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CvSettings");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("CVGenerator.Core.Data.Entities.Rules.ProfessionalAbilityRule", b =>
                {
                    b.HasOne("CVGenerator.Core.Data.Entities.CvSettings", "CvSettings")
                        .WithMany("ProfessionalAbilityRules")
                        .HasForeignKey("CvSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CvSettings");
                });

            modelBuilder.Entity("CVGenerator.Core.Data.Entities.Rules.ProjectRule", b =>
                {
                    b.HasOne("CVGenerator.Core.Data.Entities.CvSettings", "CvSettings")
                        .WithMany("ProjectRules")
                        .HasForeignKey("CvSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CVGenerator.Core.Data.Entities.ProjectRole", "ProjectRole")
                        .WithMany()
                        .HasForeignKey("ProjectRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CvSettings");

                    b.Navigation("ProjectRole");
                });

            modelBuilder.Entity("CVGenerator.Core.Data.Entities.TemporaryReference", b =>
                {
                    b.HasOne("CVGenerator.Core.Data.Entities.Cv", "Cv")
                        .WithMany("TemporaryReferences")
                        .HasForeignKey("CvId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cv");
                });

            modelBuilder.Entity("CVGenerator.Core.Data.Entities.Certificate", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("CVGenerator.Core.Data.Entities.Cv", b =>
                {
                    b.Navigation("TemporaryReferences");
                });

            modelBuilder.Entity("CVGenerator.Core.Data.Entities.CvSettings", b =>
                {
                    b.Navigation("CertificateRules");

                    b.Navigation("Cv");

                    b.Navigation("EducationRules");

                    b.Navigation("HardSkillRules");

                    b.Navigation("LanguageRules");

                    b.Navigation("ProfessionalAbilityRules");

                    b.Navigation("ProjectRules");
                });

            modelBuilder.Entity("CVGenerator.Core.Data.Entities.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("CVGenerator.Core.Data.Entities.Education", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("CVGenerator.Core.Data.Entities.Employee", b =>
                {
                    b.Navigation("Certificates");

                    b.Navigation("Cvs");

                    b.Navigation("Departments");

                    b.Navigation("Educations");

                    b.Navigation("HardSkills");

                    b.Navigation("Languages");

                    b.Navigation("ProfessionalAbilities");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("CVGenerator.Core.Data.Entities.HardSkill", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("CVGenerator.Core.Data.Entities.Language", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("CVGenerator.Core.Data.Entities.Project", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("HardSkills");
                });

            modelBuilder.Entity("CVGenerator.Core.Data.Entities.ProjectRole", b =>
                {
                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
